CCS_COMPILER			= ccsc
CCS_SOURCE				= main.c
CCS_FLAGS_NBL			= +FH +Y9 -L -A -E -M -P -J -D
CCS_FLAGS_WBL			= $(CCS_FLAGS_NBL) +GWBOOTLOADER="true"
CCS_FLAGS_LEDS			= +GLEDR="PIN_B4" +GLEDG="PIN_B5"
CCS_FLAGS_DEV_PAYLOAD	= +GDEV_PL="true"
CCS_FLAGS_DEF_PAYLOAD	= +GDEF_PL="true"
CCS_FLAGS_NUS_PAYLOAD	= +GNUS_PL="true"
ZIP						= zip -r
CLEAN_FILES				= *.err *.esym *.hex *.zip PL3/*_pic_*.h build

BUILD_DIRECTORY	= build

FIRMWARE_3_01 	= 3_01
FIRMWARE_3_10 	= 3_10
FIRMWARE_3_15 	= 3_15
FIRMWARE_3_21 	= 3_21
FIRMWARE_3_41 	= 3_41

DEF_PAYLOAD		= default_payload
DEV_PAYLOAD		= payload_dev
NUS_PAYLOAD		= payload_no_unauth_syscall
PAYLOAD_DIR		= PL3

GITHEAD = $(shell cd $(PAYLOAD_DIR) && git rev-parse HEAD && cd ..)

B2HTARGET = $(CURDIR)/tools/bin2header

all:
		#Remove existing builds.
		rm -f -r build

		#Make bin2header.
		$(MAKE) -C tools

		#Make PL3.
		$(MAKE) -C $(PAYLOAD_DIR)

		#Make custom Payloads.
		$(B2HTARGET) $(PAYLOAD_DIR)/$(DEF_PAYLOAD)_$(FIRMWARE_3_01).bin $(PAYLOAD_DIR)/$(DEF_PAYLOAD)_pic_$(FIRMWARE_3_01).h $(DEF_PAYLOAD)_$(FIRMWARE_3_01)
		$(B2HTARGET) $(PAYLOAD_DIR)/$(DEF_PAYLOAD)_$(FIRMWARE_3_10).bin $(PAYLOAD_DIR)/$(DEF_PAYLOAD)_pic_$(FIRMWARE_3_10).h $(DEF_PAYLOAD)_$(FIRMWARE_3_10)
		$(B2HTARGET) $(PAYLOAD_DIR)/$(DEF_PAYLOAD)_$(FIRMWARE_3_15).bin $(PAYLOAD_DIR)/$(DEF_PAYLOAD)_pic_$(FIRMWARE_3_15).h $(DEF_PAYLOAD)_$(FIRMWARE_3_15)
		$(B2HTARGET) $(PAYLOAD_DIR)/$(DEF_PAYLOAD)_$(FIRMWARE_3_21).bin $(PAYLOAD_DIR)/$(DEF_PAYLOAD)_pic_$(FIRMWARE_3_21).h $(DEF_PAYLOAD)_$(FIRMWARE_3_21)
		$(B2HTARGET) $(PAYLOAD_DIR)/$(DEF_PAYLOAD)_$(FIRMWARE_3_41).bin $(PAYLOAD_DIR)/$(DEF_PAYLOAD)_pic_$(FIRMWARE_3_41).h $(DEF_PAYLOAD)_$(FIRMWARE_3_41)

		$(B2HTARGET) $(PAYLOAD_DIR)/$(DEV_PAYLOAD)_$(FIRMWARE_3_01).bin $(PAYLOAD_DIR)/$(DEV_PAYLOAD)_pic_$(FIRMWARE_3_01).h $(DEV_PAYLOAD)_$(FIRMWARE_3_01)
		$(B2HTARGET) $(PAYLOAD_DIR)/$(DEV_PAYLOAD)_$(FIRMWARE_3_10).bin $(PAYLOAD_DIR)/$(DEV_PAYLOAD)_pic_$(FIRMWARE_3_10).h $(DEV_PAYLOAD)_$(FIRMWARE_3_10)
		$(B2HTARGET) $(PAYLOAD_DIR)/$(DEV_PAYLOAD)_$(FIRMWARE_3_15).bin $(PAYLOAD_DIR)/$(DEV_PAYLOAD)_pic_$(FIRMWARE_3_15).h $(DEV_PAYLOAD)_$(FIRMWARE_3_15)
		$(B2HTARGET) $(PAYLOAD_DIR)/$(DEV_PAYLOAD)_$(FIRMWARE_3_21).bin $(PAYLOAD_DIR)/$(DEV_PAYLOAD)_pic_$(FIRMWARE_3_21).h $(DEV_PAYLOAD)_$(FIRMWARE_3_21)
		$(B2HTARGET) $(PAYLOAD_DIR)/$(DEV_PAYLOAD)_$(FIRMWARE_3_41).bin $(PAYLOAD_DIR)/$(DEV_PAYLOAD)_pic_$(FIRMWARE_3_41).h $(DEV_PAYLOAD)_$(FIRMWARE_3_41)

		$(B2HTARGET) $(PAYLOAD_DIR)/$(NUS_PAYLOAD)_$(FIRMWARE_3_01).bin $(PAYLOAD_DIR)/$(NUS_PAYLOAD)_pic_$(FIRMWARE_3_01).h $(NUS_PAYLOAD)_$(FIRMWARE_3_01)
		$(B2HTARGET) $(PAYLOAD_DIR)/$(NUS_PAYLOAD)_$(FIRMWARE_3_10).bin $(PAYLOAD_DIR)/$(NUS_PAYLOAD)_pic_$(FIRMWARE_3_10).h $(NUS_PAYLOAD)_$(FIRMWARE_3_10)
		$(B2HTARGET) $(PAYLOAD_DIR)/$(NUS_PAYLOAD)_$(FIRMWARE_3_15).bin $(PAYLOAD_DIR)/$(NUS_PAYLOAD)_pic_$(FIRMWARE_3_15).h $(NUS_PAYLOAD)_$(FIRMWARE_3_15)
		$(B2HTARGET) $(PAYLOAD_DIR)/$(NUS_PAYLOAD)_$(FIRMWARE_3_21).bin $(PAYLOAD_DIR)/$(NUS_PAYLOAD)_pic_$(FIRMWARE_3_21).h $(NUS_PAYLOAD)_$(FIRMWARE_3_21)
		$(B2HTARGET) $(PAYLOAD_DIR)/$(NUS_PAYLOAD)_$(FIRMWARE_3_41).bin $(PAYLOAD_DIR)/$(NUS_PAYLOAD)_pic_$(FIRMWARE_3_41).h $(NUS_PAYLOAD)_$(FIRMWARE_3_41)

		#HEX with bootloader.
		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEF_PAYLOAD) +GFW301="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEF_PAYLOAD) +GFW310="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEF_PAYLOAD) +GFW315="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEF_PAYLOAD) +GFW321="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEF_PAYLOAD) +GFW341="true" $(CCS_SOURCE)

		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEV_PAYLOAD) +GFW301="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEV_PAYLOAD) +GFW310="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEV_PAYLOAD) +GFW315="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEV_PAYLOAD) +GFW321="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEV_PAYLOAD) +GFW341="true" $(CCS_SOURCE)

		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_NUS_PAYLOAD) +GFW301="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_NUS_PAYLOAD) +GFW310="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_NUS_PAYLOAD) +GFW315="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_NUS_PAYLOAD) +GFW321="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_WBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_NUS_PAYLOAD) +GFW341="true" $(CCS_SOURCE)

		#HEX without bootloader.
		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEF_PAYLOAD) +GFW301="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEF_PAYLOAD) +GFW310="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEF_PAYLOAD) +GFW315="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEF_PAYLOAD) +GFW321="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEF_PAYLOAD) +GFW341="true" $(CCS_SOURCE)

		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEV_PAYLOAD) +GFW301="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEV_PAYLOAD) +GFW310="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEV_PAYLOAD) +GFW315="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEV_PAYLOAD) +GFW321="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_DEV_PAYLOAD) +GFW341="true" $(CCS_SOURCE)

		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_NUS_PAYLOAD) +GFW301="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_NUS_PAYLOAD) +GFW310="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_NUS_PAYLOAD) +GFW315="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_NUS_PAYLOAD) +GFW321="true" $(CCS_SOURCE)
		$(CCS_COMPILER) $(CCS_FLAGS_NBL) $(CCS_FLAGS_LEDS) $(CCS_FLAGS_NUS_PAYLOAD) +GFW341="true" $(CCS_SOURCE)

		#Create build structure.
		mkdir $(BUILD_DIRECTORY)
			mkdir $(BUILD_DIRECTORY)/DEF
				mkdir $(BUILD_DIRECTORY)/DEF/wBTL
				mkdir $(BUILD_DIRECTORY)/DEF/nBTL
			mkdir $(BUILD_DIRECTORY)/DEV
				mkdir $(BUILD_DIRECTORY)/DEV/wBTL
				mkdir $(BUILD_DIRECTORY)/DEV/nBTL
			mkdir $(BUILD_DIRECTORY)/NUS
				mkdir $(BUILD_DIRECTORY)/NUS/wBTL
				mkdir $(BUILD_DIRECTORY)/NUS/nBTL

		#Move each payload to its directory.
		mv *_DEF_*_wBTL.hex $(BUILD_DIRECTORY)/DEF/wBTL
		mv *_DEF_*_nBTL.hex $(BUILD_DIRECTORY)/DEF/nBTL
		mv *_DEV_*_wBTL.hex $(BUILD_DIRECTORY)/DEV/wBTL
		mv *_DEV_*_nBTL.hex $(BUILD_DIRECTORY)/DEV/nBTL
		mv *_NUS_*_wBTL.hex $(BUILD_DIRECTORY)/NUS/wBTL
		mv *_NUS_*_nBTL.hex $(BUILD_DIRECTORY)/NUS/nBTL

		#Zip all HEX.
		cd $(BUILD_DIRECTORY) && $(ZIP) "PSGrooPIC_PL3_$(GITHEAD)" *
		mv build/PSGrooPIC_PL3_*.zip ./

clean: 
		#Clean files.
		rm -f -r $(CLEAN_FILES)

		#Remove compilations.
		$(MAKE) -C PL3/ clean
		$(MAKE) -C tools/ clean